let prompt,CP,checkAndSolve,basicPuzzleGridString,hiddenTripleGridString,hiddenQuadGridString,XWingGridString1,swordfishGridString1,jellyfishGridString1,xChainGridString,displayAllSolutions,chalk;_09a‍.w("prompt",[["default",["prompt"],function(v){prompt=v}]]);_09a‍.w("./solvers/cellPath",[["cellPath",["CP"],function(v){CP=v}]]);_09a‍.w("./solvers/checkAndSolve",[["default",["checkAndSolve"],function(v){checkAndSolve=v}]]);_09a‍.w("./tests/gridSamplesForTesting",[["basicPuzzleGridString",["basicPuzzleGridString"],function(v){basicPuzzleGridString=v}],["hiddenTripleGridString",["hiddenTripleGridString"],function(v){hiddenTripleGridString=v}],["hiddenQuadGridString",["hiddenQuadGridString"],function(v){hiddenQuadGridString=v}],["XWingGridString1",["XWingGridString1"],function(v){XWingGridString1=v}],["swordfishGridString1",["swordfishGridString1"],function(v){swordfishGridString1=v}],["jellyfishGridString1",["jellyfishGridString1"],function(v){jellyfishGridString1=v}],["xChainGridString",["xChainGridString"],function(v){xChainGridString=v}]]);_09a‍.w("./solvers/solutionDescriptions",[["default",["displayAllSolutions"],function(v){displayAllSolutions=v}]]);_09a‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);















const puzzleNamesWithSpacing = [
    "   basic puzzle",
    "   hidden triples",
    "   hidden quads",
    "   x-wing",
    "   swordfish",
    "   jellyfish",
    "   x-chain"
].map(x => chalk.cyan(x));
const openingMessages = [
    `Thanks for checking out the ${chalk.cyan("Sudokio Solver Algorithms")}!`,
    "",
    `These are designed to work with the UI and database of the Sudokio website,
but a simple command line version can be run as well.`,
"",
    "To get started, you submit a sudoku puzzle in the following format:",
    `"123006709..."`,
    "",
    `it should be submitted as an ${chalk.underline("81 character string")} with 0's 
representing unanswered cells`,
"",
    `You can also test out any of our sample puzzles 
by typing out one of the names listed below:`,
"",
    puzzleNamesWithSpacing,
    "",
    chalk.cyan("Let's start by entering a puzzle to test!")
];

// displays a sudoku puzzle in the standard 9x9 grid
const displayGrid = sudokuGrid => {
    CP.rowSets.forEach( row => {
        const stringRow = JSON.stringify(row.map(rowIndex => sudokuGrid[rowIndex]))
            .slice(1,18)
            .replace(/,/g, " ");
        _09a‍.g.console.log(" " + stringRow);
    });
};

const followUpOptions = currentAnswer => {
    console.log("To see the strategy data used each turn, enter 'strategy data'");
    console.log("To see a more readable description of the steps taken, enter 'steps'");
    console.log("To move onto another puzzle, enter 'next'");
    console.log("To quit, just enter 'q'");
    prompt.get("option", function(err, result) {
        switch (result.option) {
            case "strategies":
                currentAnswer.solutions.map( sol => _09a‍.g.console.log(sol));
                console.log("");
                testUserGrid()
                break;
            case "steps":
                displayAllSolutions(currentAnswer);
                console.log("");
                testUserGrid()
                break;
            case "next":
                testUserGrid();
                break;
            case "q":
                console.log("Thanks for using Sudokio! Be sure to check out the finished site!")
                break;
            default:
                console.log("Sorry, that is not a possible action! Please try the following:");
                followUpOptions(currentAnswer);
        }
    });
}

const testUserGrid = () => {
    let currentAnswer;
    console.log("Please enter your puzzle:");
    prompt.get("puzzle", function(err, result) {
        switch(result.puzzle) {
            case "basic puzzle":
                currentAnswer = checkAndSolve(basicPuzzleGridString);
                break;
            case "hidden triples":
                currentAnswer = checkAndSolve(hiddenTripleGridString);
                break;
            case "hidden quads":
                currentAnswer = checkAndSolve(hiddenQuadGridString);
                break;
            case "x-wing":
                currentAnswer = checkAndSolve(XWingGridString1);
                break;
            case "swordfish":
                currentAnswer = checkAndSolve(swordfishGridString1);
                break;
            case "jellyfish":
                currentAnswer = checkAndSolve(jellyfishGridString1);
                break;
            case "x-chain":
                currentAnswer = checkAndSolve(xChainGridString);
                break;
            default:
                currentAnswer = checkAndSolve(result.puzzle);
        };
        
        if (!currentAnswer.valid) {
            console.log("");
            console.log(`Uh oh! It looks like this is not a valid puzzle.`);
            console.log(`Error: ${currentAnswer.errorType}`);
            console.log("");
            testUserGrid();
        } else {
            console.log("");
            _09a‍.g.console.log(chalk.underline("  Starting Puzzle  "));
            displayGrid(Array.from(currentAnswer.gridString).map(x => JSON.parse(x)));

            console.log("");
            _09a‍.g.console.log(chalk.underline("  Results  "));
            console.log(`Status: ${currentAnswer.solved ? chalk.green("solved") : chalk.red("not solved")}`);
            console.log("Strategies Used:");
            currentAnswer.strategiesUsed.map( strat => console.log(`    ${chalk.cyan(strat)}`));

            console.log("");
            _09a‍.g.console.log(chalk.underline(`  ${currentAnswer.solved ? "Finished" : "Updated"} Puzzle  `));
            displayGrid(currentAnswer.updatedGrid.map((x, i) => currentAnswer.gridString[i] === "0" ? chalk.green(JSON.stringify(x)) : x));
            console.log("");
            followUpOptions(currentAnswer);
        }
});
};

// gradually display opening message, but show all puzzle names at once
openingMessages.forEach((msg, i) => {
    if (typeof msg === "string") {
        setTimeout( () => _09a‍.g.console.log(msg), (700 * i))
    } else {
        setTimeout( () => msg.map(x => _09a‍.g.console.log(x)), (700 * i))
    }
});

setTimeout(() => testUserGrid(), (700 * openingMessages.length));